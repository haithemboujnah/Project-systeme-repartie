sudo apt update
sudo apt install build-essential rpcbind

sudo apt-get update
sudo apt-get install libtirpc-dev

sudo apt-get install build-essential libtirpc-dev rpcbind


cd /mnt/c/Users/haith/Desktop/tp
rpcgen -a calcul.x
rpcgen calcul.x


gcc -o cal_server calcul_svc.c calcul_xdr.c calcul_server.c -lnsl -ltirpc -lm -I/usr/include/tirpc/
gcc -o cal_client calcul_clnt.c calcul_xdr.c calcul_client.c -lnsl -ltirpc -I/usr/include/tirpc/



rpcinfo -p localhost
ps aux | grep cal_server

./cal_server


./cal_client localhost 2 3 10 16









/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

 #include "calcul.h"
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
 
 long int * puiss_1_svc(Param *param, struct svc_req *rqstp) {
    static long int result;
    result = pow(param->a, param->b); // Calcul de a^b
    return &result;
}

 
 long *
 dec2bin_1_svc(int *num, struct svc_req *rqstp)
 {
	 static long binary = 0;
	 int n = *num, remainder, base = 1;
 
	 binary = 0;  // Reset value before calculation
 
	 while (n > 0) {
		 remainder = n % 2;
		 binary += remainder * base;
		 base *= 10;
		 n /= 2;
	 }
 
	 printf("Decimal to Binary Conversion: %d -> %ld\n", *num, binary);
	 return &binary;
 }
 
 long *
 dec2hex_1_svc(int *argp, struct svc_req *rqstp)
 {
	 static long result;
	 char buffer[20];  // Buffer to store converted string
 
	 // Convert integer to string and then parse as hex
	 sprintf(buffer, "%X", *argp);
	 result = strtol(buffer, NULL, 16);
 
	 printf("Decimal to Hex Conversion: %d -> 0x%lX\n", *argp, result);
	 return &result;
 }
 



--------------------------------------------


#include "calcul.h"
#include <stdio.h>
#include <stdlib.h>

void usage(char *prog_name) {
    printf("Usage: %s <server_host>\n", prog_name);
    exit(1);
}

int main(int argc, char *argv[]) {
    CLIENT *clnt;
    char *server_host;
    long int *result;
    Param p;
    int choice;

    if (argc < 2) {
        usage(argv[0]);
    }

    server_host = argv[1];
    clnt = clnt_create(server_host, CAL_BIN_PROG, CAL_VERS_ONE, "tcp");
    
    if (clnt == NULL) {
        clnt_pcreateerror(server_host);
        exit(1);
    }

    while (1) {
        printf("\nChoose an operation:\n");
        printf("1. Power (a^b)\n");
        printf("2. Convert Decimal to Binary\n");
        printf("3. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Enter base (a): ");
            scanf("%ld", &p.a);
            printf("Enter exponent (b): ");
            scanf("%ld", &p.b);
            result = puiss_1(&p, clnt);
            if (result == NULL) {
                clnt_perror(clnt, "Call failed");
            } else {
                printf("Result: %ld\n", *result);
            }
        } 
        else if (choice == 2) {
            int num;
            printf("Enter decimal number: ");
            scanf("%d", &num);
            result = dec2bin_1(&num, clnt);
            if (result == NULL) {
                clnt_perror(clnt, "Call failed");
            } else {
                printf("Binary: %ld\n", *result);
            }
        } 
        else if (choice == 3) {
            printf("Exiting...\n");
            break;
        } 
        else {
            printf("Invalid choice. Try again.\n");
        }
    }

    clnt_destroy(clnt);
    return 0;
}
