// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: factorization.proto

package factorization_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrimeFactorizationService_GetPrimeFactors_FullMethodName       = "/PrimeFactorizationService/GetPrimeFactors"
	PrimeFactorizationService_GetPrimeFactorsStream_FullMethodName = "/PrimeFactorizationService/GetPrimeFactorsStream"
)

// PrimeFactorizationServiceClient is the client API for PrimeFactorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeFactorizationServiceClient interface {
	// Requête/Réponse
	GetPrimeFactors(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*PrimeFactorsResponse, error)
	// Flux bidirectionnel
	GetPrimeFactorsStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NumberRequest, PrimeFactorsResponse], error)
}

type primeFactorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeFactorizationServiceClient(cc grpc.ClientConnInterface) PrimeFactorizationServiceClient {
	return &primeFactorizationServiceClient{cc}
}

func (c *primeFactorizationServiceClient) GetPrimeFactors(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*PrimeFactorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrimeFactorsResponse)
	err := c.cc.Invoke(ctx, PrimeFactorizationService_GetPrimeFactors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *primeFactorizationServiceClient) GetPrimeFactorsStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NumberRequest, PrimeFactorsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PrimeFactorizationService_ServiceDesc.Streams[0], PrimeFactorizationService_GetPrimeFactorsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumberRequest, PrimeFactorsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PrimeFactorizationService_GetPrimeFactorsStreamClient = grpc.BidiStreamingClient[NumberRequest, PrimeFactorsResponse]

// PrimeFactorizationServiceServer is the server API for PrimeFactorizationService service.
// All implementations must embed UnimplementedPrimeFactorizationServiceServer
// for forward compatibility.
type PrimeFactorizationServiceServer interface {
	// Requête/Réponse
	GetPrimeFactors(context.Context, *NumberRequest) (*PrimeFactorsResponse, error)
	// Flux bidirectionnel
	GetPrimeFactorsStream(grpc.BidiStreamingServer[NumberRequest, PrimeFactorsResponse]) error
	mustEmbedUnimplementedPrimeFactorizationServiceServer()
}

// UnimplementedPrimeFactorizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrimeFactorizationServiceServer struct{}

func (UnimplementedPrimeFactorizationServiceServer) GetPrimeFactors(context.Context, *NumberRequest) (*PrimeFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrimeFactors not implemented")
}
func (UnimplementedPrimeFactorizationServiceServer) GetPrimeFactorsStream(grpc.BidiStreamingServer[NumberRequest, PrimeFactorsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPrimeFactorsStream not implemented")
}
func (UnimplementedPrimeFactorizationServiceServer) mustEmbedUnimplementedPrimeFactorizationServiceServer() {
}
func (UnimplementedPrimeFactorizationServiceServer) testEmbeddedByValue() {}

// UnsafePrimeFactorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeFactorizationServiceServer will
// result in compilation errors.
type UnsafePrimeFactorizationServiceServer interface {
	mustEmbedUnimplementedPrimeFactorizationServiceServer()
}

func RegisterPrimeFactorizationServiceServer(s grpc.ServiceRegistrar, srv PrimeFactorizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrimeFactorizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrimeFactorizationService_ServiceDesc, srv)
}

func _PrimeFactorizationService_GetPrimeFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimeFactorizationServiceServer).GetPrimeFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrimeFactorizationService_GetPrimeFactors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimeFactorizationServiceServer).GetPrimeFactors(ctx, req.(*NumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrimeFactorizationService_GetPrimeFactorsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimeFactorizationServiceServer).GetPrimeFactorsStream(&grpc.GenericServerStream[NumberRequest, PrimeFactorsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PrimeFactorizationService_GetPrimeFactorsStreamServer = grpc.BidiStreamingServer[NumberRequest, PrimeFactorsResponse]

// PrimeFactorizationService_ServiceDesc is the grpc.ServiceDesc for PrimeFactorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeFactorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PrimeFactorizationService",
	HandlerType: (*PrimeFactorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrimeFactors",
			Handler:    _PrimeFactorizationService_GetPrimeFactors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPrimeFactorsStream",
			Handler:       _PrimeFactorizationService_GetPrimeFactorsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "factorization.proto",
}
